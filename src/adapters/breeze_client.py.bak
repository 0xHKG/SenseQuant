"""Breeze API client adapter."""

from __future__ import annotations

import pandas as pd
from loguru import logger

from src.domain.types import Order, OrderResponse, OrderStatus

try:
    from breeze_connect import BreezeConnect
except Exception as e:
    BreezeConnect = None  # type: ignore
    logger.warning("breeze_connect not available: {}", e)


class BreezeClient:
    """Wrapper for Breeze API with dry-run support."""

    def __init__(
        self, api_key: str, api_secret: str, session_token: str, dry_run: bool = True
    ) -> None:
        self.api_key = api_key
        self.api_secret = api_secret
        self.session_token = session_token
        self.dry_run = dry_run
        self._client: BreezeConnect | None = None

    def authenticate(self) -> None:
        """Authenticate with Breeze API."""
        if self.dry_run:
            logger.info("DRYRUN: skipping Breeze auth")
            return
        if BreezeConnect is None:
            raise RuntimeError("breeze_connect not installed")
        self._client = BreezeConnect(api_key=self.api_key)
        self._client.generate_session(api_secret=self.api_secret, session_token=self.session_token)
        logger.info("Breeze session established")

    def get_ltp(self, symbol: str) -> float | None:
        """Get last traded price for symbol."""
        try:
            if self.dry_run:
                logger.info("DRYRUN get_ltp {}", symbol)
                return 0.0
            assert self._client is not None, "Authenticate first"
            resp = self._client.get_quotes(
                stock_code=symbol, exchange_code="NSE", product_type="cash"
            )
            price: float | None = None
            if isinstance(resp, dict):
                succ = resp.get("Success") or resp.get("success")
                if succ and isinstance(succ, list) and succ:
                    price = float(succ[0].get("ltp") or succ[0].get("Ltp") or 0.0)
            return price
        except Exception as e:
            logger.exception("get_ltp failed for {}: {}", symbol, e)
            return None

    def get_historical(self, symbol: str, interval: str, from_dt: str, to_dt: str) -> pd.DataFrame:
        """
        Fetch historical OHLCV data.

        Args:
            symbol: Stock symbol
            interval: '1minute', '5minute', '1day', etc.
            from_dt: Start datetime string 'YYYY-MM-DD HH:MM' or 'YYYY-MM-DD'
            to_dt: End datetime string 'YYYY-MM-DD HH:MM' or 'YYYY-MM-DD'

        Returns:
            DataFrame with datetime index and OHLCV columns
        """
        try:
            if self.dry_run:
                logger.info("DRYRUN historical {} {} {} {}", symbol, interval, from_dt, to_dt)
                return pd.DataFrame(
                    columns=["datetime", "open", "high", "low", "close", "volume"]
                ).set_index("datetime")
            assert self._client is not None, "Authenticate first"
            resp = self._client.get_historical_data(
                interval=interval,
                from_date=from_dt,
                to_date=to_dt,
                stock_code=symbol,
                exchange_code="NSE",
                product_type="cash",
            )
            df = pd.DataFrame(resp if isinstance(resp, list) else resp.get("Success", []))
            if not df.empty:
                # normalize column names
                df.columns = [c.lower() for c in df.columns]
                # parse datetime
                dt_col = (
                    "datetime"
                    if "datetime" in df.columns
                    else "time"
                    if "time" in df.columns
                    else None
                )
                if dt_col:
                    df[dt_col] = pd.to_datetime(df[dt_col])
                    df = df.set_index(dt_col)
            return df
        except Exception as e:
            logger.exception("get_historical failed for {}: {}", symbol, e)
            return pd.DataFrame()

    def place_order(self, order: Order) -> OrderResponse:
        """
        Place order via Breeze API.

        Args:
            order: Order object with symbol, side, qty, order_type, price

        Returns:
            OrderResponse with order_id, status, raw response
        """
        try:
            if self.dry_run:
                logger.info("DRYRUN place_order {}", order)
                return OrderResponse(
                    order_id=f"DRYRUN-{abs(hash((order.symbol, order.side, order.qty)))}",
                    status="FILLED",
                    raw={"status": "DRYRUN", "order": order},
                )
            assert self._client is not None, "Authenticate first"
            payload = {
                "stock_code": order.symbol,
                "exchange_code": "NSE",
                "product": "cash",
                "action": order.side,
                "quantity": str(order.qty),
                "order_type": order.order_type,
                "price": str(order.price) if order.price else "0",
            }
            res = self._client.place_order(**payload)
            logger.info("Order response: {}", res)
            order_id = str(res.get("Success", {}).get("order_id", "UNKNOWN"))
            status: OrderStatus = "PLACED"
            return OrderResponse(order_id=order_id, status=status, raw=res)
        except Exception as e:
            logger.exception("place_order failed: {}", e)
            return OrderResponse(order_id="ERROR", status="REJECTED", raw={"error": str(e)})
